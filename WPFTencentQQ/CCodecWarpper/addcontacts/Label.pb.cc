// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Label.proto

#include "Label.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Color_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_Color_2eproto;
namespace AccountSearchPb {
class LabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label> _instance;
} _Label_default_instance_;
}  // namespace AccountSearchPb
static void InitDefaultsscc_info_Label_Label_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AccountSearchPb::_Label_default_instance_;
    new (ptr) ::AccountSearchPb::Label();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountSearchPb::Label::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Label_Label_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Label_Label_2eproto}, {
      &scc_info_Color_Color_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Label_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Label_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Label_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Label_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, bytes_name_),
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, text_color_),
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, edging_color_),
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, uint32_label_attr_),
  PROTOBUF_FIELD_OFFSET(::AccountSearchPb::Label, uint32_label_type_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::AccountSearchPb::Label)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AccountSearchPb::_Label_default_instance_),
};

const char descriptor_table_protodef_Label_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Label.proto\022\017AccountSearchPb\032\013Color.pr"
  "oto\"\253\001\n\005Label\022\022\n\nbytes_name\030\001 \001(\014\022*\n\ntex"
  "t_color\030\002 \001(\0132\026.AccountSearchPb.Color\022,\n"
  "\014edging_color\030\003 \001(\0132\026.AccountSearchPb.Co"
  "lor\022\031\n\021uint32_label_attr\030\004 \001(\r\022\031\n\021uint32"
  "_label_type\030\005 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Label_2eproto_deps[1] = {
  &::descriptor_table_Color_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Label_2eproto_sccs[1] = {
  &scc_info_Label_Label_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Label_2eproto_once;
static bool descriptor_table_Label_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Label_2eproto = {
  &descriptor_table_Label_2eproto_initialized, descriptor_table_protodef_Label_2eproto, "Label.proto", 217,
  &descriptor_table_Label_2eproto_once, descriptor_table_Label_2eproto_sccs, descriptor_table_Label_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_Label_2eproto::offsets,
  file_level_metadata_Label_2eproto, 1, file_level_enum_descriptors_Label_2eproto, file_level_service_descriptors_Label_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Label_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Label_2eproto), true);
namespace AccountSearchPb {

// ===================================================================

void Label::InitAsDefaultInstance() {
  ::AccountSearchPb::_Label_default_instance_._instance.get_mutable()->text_color_ = const_cast< ::AccountSearchPb::Color*>(
      ::AccountSearchPb::Color::internal_default_instance());
  ::AccountSearchPb::_Label_default_instance_._instance.get_mutable()->edging_color_ = const_cast< ::AccountSearchPb::Color*>(
      ::AccountSearchPb::Color::internal_default_instance());
}
class Label::_Internal {
 public:
  using HasBits = decltype(std::declval<Label>()._has_bits_);
  static void set_has_bytes_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AccountSearchPb::Color& text_color(const Label* msg);
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AccountSearchPb::Color& edging_color(const Label* msg);
  static void set_has_edging_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uint32_label_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uint32_label_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::AccountSearchPb::Color&
Label::_Internal::text_color(const Label* msg) {
  return *msg->text_color_;
}
const ::AccountSearchPb::Color&
Label::_Internal::edging_color(const Label* msg) {
  return *msg->edging_color_;
}
void Label::clear_text_color() {
  if (text_color_ != nullptr) text_color_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Label::clear_edging_color() {
  if (edging_color_ != nullptr) edging_color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Label::Label()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AccountSearchPb.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytes_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bytes_name()) {
    bytes_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytes_name_);
  }
  if (from.has_text_color()) {
    text_color_ = new ::AccountSearchPb::Color(*from.text_color_);
  } else {
    text_color_ = nullptr;
  }
  if (from.has_edging_color()) {
    edging_color_ = new ::AccountSearchPb::Color(*from.edging_color_);
  } else {
    edging_color_ = nullptr;
  }
  ::memcpy(&uint32_label_attr_, &from.uint32_label_attr_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint32_label_type_) -
    reinterpret_cast<char*>(&uint32_label_attr_)) + sizeof(uint32_label_type_));
  // @@protoc_insertion_point(copy_constructor:AccountSearchPb.Label)
}

void Label::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Label_Label_2eproto.base);
  bytes_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&text_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint32_label_type_) -
      reinterpret_cast<char*>(&text_color_)) + sizeof(uint32_label_type_));
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:AccountSearchPb.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  bytes_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete text_color_;
  if (this != internal_default_instance()) delete edging_color_;
}

void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label& Label::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_Label_2eproto.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountSearchPb.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bytes_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(text_color_ != nullptr);
      text_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(edging_color_ != nullptr);
      edging_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&uint32_label_attr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_label_type_) -
        reinterpret_cast<char*>(&uint32_label_attr_)) + sizeof(uint32_label_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Label::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes bytes_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bytes_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AccountSearchPb.Color text_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_text_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AccountSearchPb.Color edging_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_edging_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_label_attr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uint32_label_attr(&has_bits);
          uint32_label_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_label_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint32_label_type(&has_bits);
          uint32_label_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Label::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AccountSearchPb.Label)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bytes_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AccountSearchPb.Color text_color = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_text_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AccountSearchPb.Color edging_color = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_edging_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint32_label_attr = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uint32_label_attr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_label_attr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint32_label_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_uint32_label_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_label_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AccountSearchPb.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AccountSearchPb.Label)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Label::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AccountSearchPb.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes bytes_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bytes_name(), output);
  }

  // optional .AccountSearchPb.Color text_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::text_color(this), output);
  }

  // optional .AccountSearchPb.Color edging_color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::edging_color(this), output);
  }

  // optional uint32 uint32_label_attr = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->uint32_label_attr(), output);
  }

  // optional uint32 uint32_label_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->uint32_label_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AccountSearchPb.Label)
}

::PROTOBUF_NAMESPACE_ID::uint8* Label::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountSearchPb.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes bytes_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes_name(), target);
  }

  // optional .AccountSearchPb.Color text_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::text_color(this), target);
  }

  // optional .AccountSearchPb.Color edging_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::edging_color(this), target);
  }

  // optional uint32 uint32_label_attr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_label_attr(), target);
  }

  // optional uint32 uint32_label_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_label_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountSearchPb.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountSearchPb.Label)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes bytes_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->bytes_name());
    }

    // optional .AccountSearchPb.Color text_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_color_);
    }

    // optional .AccountSearchPb.Color edging_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edging_color_);
    }

    // optional uint32 uint32_label_attr = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->uint32_label_attr());
    }

    // optional uint32 uint32_label_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->uint32_label_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountSearchPb.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountSearchPb.Label)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountSearchPb.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountSearchPb.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      bytes_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytes_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_text_color()->::AccountSearchPb::Color::MergeFrom(from.text_color());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_edging_color()->::AccountSearchPb::Color::MergeFrom(from.edging_color());
    }
    if (cached_has_bits & 0x00000008u) {
      uint32_label_attr_ = from.uint32_label_attr_;
    }
    if (cached_has_bits & 0x00000010u) {
      uint32_label_type_ = from.uint32_label_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Label::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountSearchPb.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountSearchPb.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bytes_name_.Swap(&other->bytes_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(text_color_, other->text_color_);
  swap(edging_color_, other->edging_color_);
  swap(uint32_label_attr_, other->uint32_label_attr_);
  swap(uint32_label_type_, other->uint32_label_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AccountSearchPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AccountSearchPb::Label* Arena::CreateMaybeMessage< ::AccountSearchPb::Label >(Arena* arena) {
  return Arena::CreateInternal< ::AccountSearchPb::Label >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
