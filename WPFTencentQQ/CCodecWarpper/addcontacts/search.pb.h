// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_search_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_search_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "record.pb.h"
#include "Location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_2eproto;
namespace AccountSearchPb {
class search;
class searchDefaultTypeInternal;
extern searchDefaultTypeInternal _search_default_instance_;
}  // namespace AccountSearchPb
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountSearchPb::search* Arena::CreateMaybeMessage<::AccountSearchPb::search>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AccountSearchPb {

// ===================================================================

class search :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountSearchPb.search) */ {
 public:
  search();
  virtual ~search();

  search(const search& from);
  search(search&& from) noexcept
    : search() {
    *this = ::std::move(from);
  }

  inline search& operator=(const search& from) {
    CopyFrom(from);
    return *this;
  }
  inline search& operator=(search&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const search& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const search* internal_default_instance() {
    return reinterpret_cast<const search*>(
               &_search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(search& a, search& b) {
    a.Swap(&b);
  }
  inline void Swap(search* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline search* New() const final {
    return CreateMaybeMessage<search>(nullptr);
  }

  search* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<search>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const search& from);
  void MergeFrom(const search& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(search* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountSearchPb.search";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 5,
    kHighlightFieldNumber = 6,
    kKeywordFieldNumber = 4,
    kMsgUserLocationFieldNumber = 10,
    kStartFieldNumber = 1,
    kCountFieldNumber = 2,
    kEndFieldNumber = 3,
    kBoolLocationGroupFieldNumber = 11,
  };
  // repeated .AccountSearchPb.record list = 5;
  int list_size() const;
  void clear_list();
  ::AccountSearchPb::record* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccountSearchPb::record >*
      mutable_list();
  const ::AccountSearchPb::record& list(int index) const;
  ::AccountSearchPb::record* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccountSearchPb::record >&
      list() const;

  // repeated string highlight = 6;
  int highlight_size() const;
  void clear_highlight();
  const std::string& highlight(int index) const;
  std::string* mutable_highlight(int index);
  void set_highlight(int index, const std::string& value);
  void set_highlight(int index, std::string&& value);
  void set_highlight(int index, const char* value);
  void set_highlight(int index, const char* value, size_t size);
  std::string* add_highlight();
  void add_highlight(const std::string& value);
  void add_highlight(std::string&& value);
  void add_highlight(const char* value);
  void add_highlight(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& highlight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_highlight();

  // optional string keyword = 4;
  bool has_keyword() const;
  void clear_keyword();
  const std::string& keyword() const;
  void set_keyword(const std::string& value);
  void set_keyword(std::string&& value);
  void set_keyword(const char* value);
  void set_keyword(const char* value, size_t size);
  std::string* mutable_keyword();
  std::string* release_keyword();
  void set_allocated_keyword(std::string* keyword);

  // optional .AccountSearchPb.Location msg_user_location = 10;
  bool has_msg_user_location() const;
  void clear_msg_user_location();
  const ::AccountSearchPb::Location& msg_user_location() const;
  ::AccountSearchPb::Location* release_msg_user_location();
  ::AccountSearchPb::Location* mutable_msg_user_location();
  void set_allocated_msg_user_location(::AccountSearchPb::Location* msg_user_location);

  // optional int32 start = 1;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 end = 3;
  bool has_end() const;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool bool_location_group = 11 [default = false];
  bool has_bool_location_group() const;
  void clear_bool_location_group();
  bool bool_location_group() const;
  void set_bool_location_group(bool value);

  // @@protoc_insertion_point(class_scope:AccountSearchPb.search)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccountSearchPb::record > list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> highlight_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyword_;
  ::AccountSearchPb::Location* msg_user_location_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  bool bool_location_group_;
  friend struct ::TableStruct_search_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// search

// optional int32 start = 1;
inline bool search::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void search::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 search::start() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.start)
  return start_;
}
inline void search::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.start)
}

// optional uint32 count = 2;
inline bool search::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void search::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 search::count() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.count)
  return count_;
}
inline void search::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.count)
}

// optional uint32 end = 3;
inline bool search::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void search::clear_end() {
  end_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 search::end() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.end)
  return end_;
}
inline void search::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  end_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.end)
}

// optional string keyword = 4;
inline bool search::has_keyword() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void search::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& search::keyword() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.keyword)
  return keyword_.GetNoArena();
}
inline void search::set_keyword(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keyword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.keyword)
}
inline void search::set_keyword(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  keyword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.search.keyword)
}
inline void search::set_keyword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  keyword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.search.keyword)
}
inline void search::set_keyword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  keyword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.search.keyword)
}
inline std::string* search::mutable_keyword() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.search.keyword)
  return keyword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* search::release_keyword() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.search.keyword)
  if (!has_keyword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keyword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void search::set_allocated_keyword(std::string* keyword) {
  if (keyword != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keyword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.search.keyword)
}

// repeated .AccountSearchPb.record list = 5;
inline int search::list_size() const {
  return list_.size();
}
inline ::AccountSearchPb::record* search::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.search.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccountSearchPb::record >*
search::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AccountSearchPb.search.list)
  return &list_;
}
inline const ::AccountSearchPb::record& search::list(int index) const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.list)
  return list_.Get(index);
}
inline ::AccountSearchPb::record* search::add_list() {
  // @@protoc_insertion_point(field_add:AccountSearchPb.search.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AccountSearchPb::record >&
search::list() const {
  // @@protoc_insertion_point(field_list:AccountSearchPb.search.list)
  return list_;
}

// repeated string highlight = 6;
inline int search::highlight_size() const {
  return highlight_.size();
}
inline void search::clear_highlight() {
  highlight_.Clear();
}
inline const std::string& search::highlight(int index) const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.highlight)
  return highlight_.Get(index);
}
inline std::string* search::mutable_highlight(int index) {
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.search.highlight)
  return highlight_.Mutable(index);
}
inline void search::set_highlight(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.highlight)
  highlight_.Mutable(index)->assign(value);
}
inline void search::set_highlight(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.highlight)
  highlight_.Mutable(index)->assign(std::move(value));
}
inline void search::set_highlight(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  highlight_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.search.highlight)
}
inline void search::set_highlight(int index, const char* value, size_t size) {
  highlight_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.search.highlight)
}
inline std::string* search::add_highlight() {
  // @@protoc_insertion_point(field_add_mutable:AccountSearchPb.search.highlight)
  return highlight_.Add();
}
inline void search::add_highlight(const std::string& value) {
  highlight_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AccountSearchPb.search.highlight)
}
inline void search::add_highlight(std::string&& value) {
  highlight_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AccountSearchPb.search.highlight)
}
inline void search::add_highlight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  highlight_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AccountSearchPb.search.highlight)
}
inline void search::add_highlight(const char* value, size_t size) {
  highlight_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AccountSearchPb.search.highlight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
search::highlight() const {
  // @@protoc_insertion_point(field_list:AccountSearchPb.search.highlight)
  return highlight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
search::mutable_highlight() {
  // @@protoc_insertion_point(field_mutable_list:AccountSearchPb.search.highlight)
  return &highlight_;
}

// optional .AccountSearchPb.Location msg_user_location = 10;
inline bool search::has_msg_user_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::AccountSearchPb::Location& search::msg_user_location() const {
  const ::AccountSearchPb::Location* p = msg_user_location_;
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.msg_user_location)
  return p != nullptr ? *p : *reinterpret_cast<const ::AccountSearchPb::Location*>(
      &::AccountSearchPb::_Location_default_instance_);
}
inline ::AccountSearchPb::Location* search::release_msg_user_location() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.search.msg_user_location)
  _has_bits_[0] &= ~0x00000002u;
  ::AccountSearchPb::Location* temp = msg_user_location_;
  msg_user_location_ = nullptr;
  return temp;
}
inline ::AccountSearchPb::Location* search::mutable_msg_user_location() {
  _has_bits_[0] |= 0x00000002u;
  if (msg_user_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountSearchPb::Location>(GetArenaNoVirtual());
    msg_user_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.search.msg_user_location)
  return msg_user_location_;
}
inline void search::set_allocated_msg_user_location(::AccountSearchPb::Location* msg_user_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_user_location_);
  }
  if (msg_user_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_user_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_user_location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_user_location_ = msg_user_location;
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.search.msg_user_location)
}

// optional bool bool_location_group = 11 [default = false];
inline bool search::has_bool_location_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void search::clear_bool_location_group() {
  bool_location_group_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool search::bool_location_group() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.search.bool_location_group)
  return bool_location_group_;
}
inline void search::set_bool_location_group(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bool_location_group_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.search.bool_location_group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_search_2eproto
