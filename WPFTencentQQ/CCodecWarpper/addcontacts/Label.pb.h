// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Label_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Label_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Color.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Label_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Label_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Label_2eproto;
namespace AccountSearchPb {
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
}  // namespace AccountSearchPb
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountSearchPb::Label* Arena::CreateMaybeMessage<::AccountSearchPb::Label>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AccountSearchPb {

// ===================================================================

class Label :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountSearchPb.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountSearchPb.Label";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Label_2eproto);
    return ::descriptor_table_Label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesNameFieldNumber = 1,
    kTextColorFieldNumber = 2,
    kEdgingColorFieldNumber = 3,
    kUint32LabelAttrFieldNumber = 4,
    kUint32LabelTypeFieldNumber = 5,
  };
  // optional bytes bytes_name = 1;
  bool has_bytes_name() const;
  void clear_bytes_name();
  const std::string& bytes_name() const;
  void set_bytes_name(const std::string& value);
  void set_bytes_name(std::string&& value);
  void set_bytes_name(const char* value);
  void set_bytes_name(const void* value, size_t size);
  std::string* mutable_bytes_name();
  std::string* release_bytes_name();
  void set_allocated_bytes_name(std::string* bytes_name);

  // optional .AccountSearchPb.Color text_color = 2;
  bool has_text_color() const;
  void clear_text_color();
  const ::AccountSearchPb::Color& text_color() const;
  ::AccountSearchPb::Color* release_text_color();
  ::AccountSearchPb::Color* mutable_text_color();
  void set_allocated_text_color(::AccountSearchPb::Color* text_color);

  // optional .AccountSearchPb.Color edging_color = 3;
  bool has_edging_color() const;
  void clear_edging_color();
  const ::AccountSearchPb::Color& edging_color() const;
  ::AccountSearchPb::Color* release_edging_color();
  ::AccountSearchPb::Color* mutable_edging_color();
  void set_allocated_edging_color(::AccountSearchPb::Color* edging_color);

  // optional uint32 uint32_label_attr = 4;
  bool has_uint32_label_attr() const;
  void clear_uint32_label_attr();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_label_attr() const;
  void set_uint32_label_attr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 uint32_label_type = 5;
  bool has_uint32_label_type() const;
  void clear_uint32_label_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_label_type() const;
  void set_uint32_label_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:AccountSearchPb.Label)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_name_;
  ::AccountSearchPb::Color* text_color_;
  ::AccountSearchPb::Color* edging_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_label_attr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_label_type_;
  friend struct ::TableStruct_Label_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label

// optional bytes bytes_name = 1;
inline bool Label::has_bytes_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label::clear_bytes_name() {
  bytes_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Label::bytes_name() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.Label.bytes_name)
  return bytes_name_.GetNoArena();
}
inline void Label::set_bytes_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.Label.bytes_name)
}
inline void Label::set_bytes_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.Label.bytes_name)
}
inline void Label::set_bytes_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bytes_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.Label.bytes_name)
}
inline void Label::set_bytes_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bytes_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.Label.bytes_name)
}
inline std::string* Label::mutable_bytes_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.Label.bytes_name)
  return bytes_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label::release_bytes_name() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.Label.bytes_name)
  if (!has_bytes_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bytes_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_bytes_name(std::string* bytes_name) {
  if (bytes_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bytes_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_name);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.Label.bytes_name)
}

// optional .AccountSearchPb.Color text_color = 2;
inline bool Label::has_text_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::AccountSearchPb::Color& Label::text_color() const {
  const ::AccountSearchPb::Color* p = text_color_;
  // @@protoc_insertion_point(field_get:AccountSearchPb.Label.text_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::AccountSearchPb::Color*>(
      &::AccountSearchPb::_Color_default_instance_);
}
inline ::AccountSearchPb::Color* Label::release_text_color() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.Label.text_color)
  _has_bits_[0] &= ~0x00000002u;
  ::AccountSearchPb::Color* temp = text_color_;
  text_color_ = nullptr;
  return temp;
}
inline ::AccountSearchPb::Color* Label::mutable_text_color() {
  _has_bits_[0] |= 0x00000002u;
  if (text_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountSearchPb::Color>(GetArenaNoVirtual());
    text_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.Label.text_color)
  return text_color_;
}
inline void Label::set_allocated_text_color(::AccountSearchPb::Color* text_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_color_);
  }
  if (text_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_color_ = text_color;
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.Label.text_color)
}

// optional .AccountSearchPb.Color edging_color = 3;
inline bool Label::has_edging_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::AccountSearchPb::Color& Label::edging_color() const {
  const ::AccountSearchPb::Color* p = edging_color_;
  // @@protoc_insertion_point(field_get:AccountSearchPb.Label.edging_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::AccountSearchPb::Color*>(
      &::AccountSearchPb::_Color_default_instance_);
}
inline ::AccountSearchPb::Color* Label::release_edging_color() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.Label.edging_color)
  _has_bits_[0] &= ~0x00000004u;
  ::AccountSearchPb::Color* temp = edging_color_;
  edging_color_ = nullptr;
  return temp;
}
inline ::AccountSearchPb::Color* Label::mutable_edging_color() {
  _has_bits_[0] |= 0x00000004u;
  if (edging_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountSearchPb::Color>(GetArenaNoVirtual());
    edging_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.Label.edging_color)
  return edging_color_;
}
inline void Label::set_allocated_edging_color(::AccountSearchPb::Color* edging_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edging_color_);
  }
  if (edging_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      edging_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edging_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  edging_color_ = edging_color;
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.Label.edging_color)
}

// optional uint32 uint32_label_attr = 4;
inline bool Label::has_uint32_label_attr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Label::clear_uint32_label_attr() {
  uint32_label_attr_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Label::uint32_label_attr() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.Label.uint32_label_attr)
  return uint32_label_attr_;
}
inline void Label::set_uint32_label_attr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uint32_label_attr_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.Label.uint32_label_attr)
}

// optional uint32 uint32_label_type = 5;
inline bool Label::has_uint32_label_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Label::clear_uint32_label_type() {
  uint32_label_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Label::uint32_label_type() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.Label.uint32_label_type)
  return uint32_label_type_;
}
inline void Label::set_uint32_label_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  uint32_label_type_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.Label.uint32_label_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Label_2eproto
