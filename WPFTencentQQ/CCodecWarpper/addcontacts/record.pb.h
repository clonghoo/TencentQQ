// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_record_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_record_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Label.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_record_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_record_2eproto;
namespace AccountSearchPb {
class record;
class recordDefaultTypeInternal;
extern recordDefaultTypeInternal _record_default_instance_;
}  // namespace AccountSearchPb
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountSearchPb::record* Arena::CreateMaybeMessage<::AccountSearchPb::record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AccountSearchPb {

enum record_Source : int {
  record_Source_UNIVERSAL = 1
};
bool record_Source_IsValid(int value);
constexpr record_Source record_Source_Source_MIN = record_Source_UNIVERSAL;
constexpr record_Source record_Source_Source_MAX = record_Source_UNIVERSAL;
constexpr int record_Source_Source_ARRAYSIZE = record_Source_Source_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* record_Source_descriptor();
template<typename T>
inline const std::string& record_Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, record_Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function record_Source_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    record_Source_descriptor(), enum_t_value);
}
inline bool record_Source_Parse(
    const std::string& name, record_Source* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<record_Source>(
    record_Source_descriptor(), name, value);
}
// ===================================================================

class record :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountSearchPb.record) */ {
 public:
  record();
  virtual ~record();

  record(const record& from);
  record(record&& from) noexcept
    : record() {
    *this = ::std::move(from);
  }

  inline record& operator=(const record& from) {
    CopyFrom(from);
    return *this;
  }
  inline record& operator=(record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const record* internal_default_instance() {
    return reinterpret_cast<const record*>(
               &_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(record& a, record& b) {
    a.Swap(&b);
  }
  inline void Swap(record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline record* New() const final {
    return CreateMaybeMessage<record>(nullptr);
  }

  record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const record& from);
  void MergeFrom(const record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountSearchPb.record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_record_2eproto);
    return ::descriptor_table_record_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef record_Source Source;
  static constexpr Source UNIVERSAL =
    record_Source_UNIVERSAL;
  static inline bool Source_IsValid(int value) {
    return record_Source_IsValid(value);
  }
  static constexpr Source Source_MIN =
    record_Source_Source_MIN;
  static constexpr Source Source_MAX =
    record_Source_Source_MAX;
  static constexpr int Source_ARRAYSIZE =
    record_Source_Source_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Source_descriptor() {
    return record_Source_descriptor();
  }
  template<typename T>
  static inline const std::string& Source_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Source>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Source_Name.");
    return record_Source_Name(enum_t_value);
  }
  static inline bool Source_Parse(const std::string& name,
      Source* value) {
    return record_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kAccountFieldNumber = 7,
    kBriefFieldNumber = 8,
    kMobileFieldNumber = 12,
    kSignFieldNumber = 13,
    kClassNameFieldNumber = 18,
    kCountryNameFieldNumber = 19,
    kProvinceNameFieldNumber = 20,
    kCityNameFieldNumber = 21,
    kMsgGroupLabelsFieldNumber = 22,
    kUinFieldNumber = 1,
    kCodeFieldNumber = 2,
    kSexFieldNumber = 5,
    kAgeFieldNumber = 6,
    kFlagFieldNumber = 10,
    kRelationFieldNumber = 11,
    kNumberFieldNumber = 9,
    kCountryFieldNumber = 14,
    kProvinceFieldNumber = 15,
    kCityFieldNumber = 16,
    kClassIndexFieldNumber = 17,
    kSourceFieldNumber = 3,
  };
  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string account = 7;
  bool has_account() const;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // optional string brief = 8;
  bool has_brief() const;
  void clear_brief();
  const std::string& brief() const;
  void set_brief(const std::string& value);
  void set_brief(std::string&& value);
  void set_brief(const char* value);
  void set_brief(const char* value, size_t size);
  std::string* mutable_brief();
  std::string* release_brief();
  void set_allocated_brief(std::string* brief);

  // optional string mobile = 12;
  bool has_mobile() const;
  void clear_mobile();
  const std::string& mobile() const;
  void set_mobile(const std::string& value);
  void set_mobile(std::string&& value);
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  std::string* mutable_mobile();
  std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);

  // optional bytes sign = 13;
  bool has_sign() const;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);

  // optional string class_name = 18;
  bool has_class_name() const;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // optional string country_name = 19;
  bool has_country_name() const;
  void clear_country_name();
  const std::string& country_name() const;
  void set_country_name(const std::string& value);
  void set_country_name(std::string&& value);
  void set_country_name(const char* value);
  void set_country_name(const char* value, size_t size);
  std::string* mutable_country_name();
  std::string* release_country_name();
  void set_allocated_country_name(std::string* country_name);

  // optional string province_name = 20;
  bool has_province_name() const;
  void clear_province_name();
  const std::string& province_name() const;
  void set_province_name(const std::string& value);
  void set_province_name(std::string&& value);
  void set_province_name(const char* value);
  void set_province_name(const char* value, size_t size);
  std::string* mutable_province_name();
  std::string* release_province_name();
  void set_allocated_province_name(std::string* province_name);

  // optional string city_name = 21;
  bool has_city_name() const;
  void clear_city_name();
  const std::string& city_name() const;
  void set_city_name(const std::string& value);
  void set_city_name(std::string&& value);
  void set_city_name(const char* value);
  void set_city_name(const char* value, size_t size);
  std::string* mutable_city_name();
  std::string* release_city_name();
  void set_allocated_city_name(std::string* city_name);

  // optional .AccountSearchPb.Label msg_group_labels = 22;
  bool has_msg_group_labels() const;
  void clear_msg_group_labels();
  const ::AccountSearchPb::Label& msg_group_labels() const;
  ::AccountSearchPb::Label* release_msg_group_labels();
  ::AccountSearchPb::Label* mutable_msg_group_labels();
  void set_allocated_msg_group_labels(::AccountSearchPb::Label* msg_group_labels);

  // optional uint64 uin = 1;
  bool has_uin() const;
  void clear_uin();
  ::PROTOBUF_NAMESPACE_ID::uint64 uin() const;
  void set_uin(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 code = 2;
  bool has_code() const;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 sex = 5;
  bool has_sex() const;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 age = 6;
  bool has_age() const;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 flag = 10;
  bool has_flag() const;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint64 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 relation = 11;
  bool has_relation() const;
  void clear_relation();
  ::PROTOBUF_NAMESPACE_ID::uint64 relation() const;
  void set_relation(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 number = 9;
  bool has_number() const;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 country = 14;
  bool has_country() const;
  void clear_country();
  ::PROTOBUF_NAMESPACE_ID::uint32 country() const;
  void set_country(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 province = 15;
  bool has_province() const;
  void clear_province();
  ::PROTOBUF_NAMESPACE_ID::uint32 province() const;
  void set_province(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 city = 16;
  bool has_city() const;
  void clear_city();
  ::PROTOBUF_NAMESPACE_ID::uint32 city() const;
  void set_city(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 class_index = 17;
  bool has_class_index() const;
  void clear_class_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 class_index() const;
  void set_class_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
  bool has_source() const;
  void clear_source();
  ::AccountSearchPb::record_Source source() const;
  void set_source(::AccountSearchPb::record_Source value);

  // @@protoc_insertion_point(class_scope:AccountSearchPb.record)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brief_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_name_;
  ::AccountSearchPb::Label* msg_group_labels_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  ::PROTOBUF_NAMESPACE_ID::uint64 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 country_;
  ::PROTOBUF_NAMESPACE_ID::uint32 province_;
  ::PROTOBUF_NAMESPACE_ID::uint32 city_;
  ::PROTOBUF_NAMESPACE_ID::uint32 class_index_;
  int source_;
  friend struct ::TableStruct_record_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// record

// optional uint64 uin = 1;
inline bool record::has_uin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void record::clear_uin() {
  uin_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 record::uin() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.uin)
  return uin_;
}
inline void record::set_uin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  uin_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.uin)
}

// optional uint64 code = 2;
inline bool record::has_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void record::clear_code() {
  code_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 record::code() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.code)
  return code_;
}
inline void record::set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  code_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.code)
}

// optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
inline bool record::has_source() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void record::clear_source() {
  source_ = 1;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::AccountSearchPb::record_Source record::source() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.source)
  return static_cast< ::AccountSearchPb::record_Source >(source_);
}
inline void record::set_source(::AccountSearchPb::record_Source value) {
  assert(::AccountSearchPb::record_Source_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  source_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.source)
}

// optional string name = 4;
inline bool record::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void record::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& record::name() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.name)
  return name_.GetNoArena();
}
inline void record::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.name)
}
inline void record::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.name)
}
inline void record::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.name)
}
inline void record::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.name)
}
inline std::string* record::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_name() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.name)
}

// optional uint32 sex = 5;
inline bool record::has_sex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void record::clear_sex() {
  sex_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::sex() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.sex)
  return sex_;
}
inline void record::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.sex)
}

// optional uint32 age = 6;
inline bool record::has_age() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void record::clear_age() {
  age_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::age() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.age)
  return age_;
}
inline void record::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  age_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.age)
}

// optional string account = 7;
inline bool record::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void record::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& record::account() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.account)
  return account_.GetNoArena();
}
inline void record::set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.account)
}
inline void record::set_account(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.account)
}
inline void record::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.account)
}
inline void record::set_account(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.account)
}
inline std::string* record::mutable_account() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_account() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.account)
  if (!has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return account_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.account)
}

// optional string brief = 8;
inline bool record::has_brief() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void record::clear_brief() {
  brief_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& record::brief() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.brief)
  return brief_.GetNoArena();
}
inline void record::set_brief(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  brief_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.brief)
}
inline void record::set_brief(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  brief_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.brief)
}
inline void record::set_brief(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  brief_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.brief)
}
inline void record::set_brief(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  brief_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.brief)
}
inline std::string* record::mutable_brief() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.brief)
  return brief_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_brief() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.brief)
  if (!has_brief()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return brief_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_brief(std::string* brief) {
  if (brief != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brief_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brief);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.brief)
}

// optional uint32 number = 9;
inline bool record::has_number() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void record::clear_number() {
  number_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::number() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.number)
  return number_;
}
inline void record::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  number_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.number)
}

// optional uint64 flag = 10;
inline bool record::has_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void record::clear_flag() {
  flag_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 record::flag() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.flag)
  return flag_;
}
inline void record::set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  flag_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.flag)
}

// optional uint64 relation = 11;
inline bool record::has_relation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void record::clear_relation() {
  relation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 record::relation() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.relation)
  return relation_;
}
inline void record::set_relation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  relation_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.relation)
}

// optional string mobile = 12;
inline bool record::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void record::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& record::mobile() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.mobile)
  return mobile_.GetNoArena();
}
inline void record::set_mobile(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.mobile)
}
inline void record::set_mobile(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  mobile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.mobile)
}
inline void record::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.mobile)
}
inline void record::set_mobile(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.mobile)
}
inline std::string* record::mutable_mobile() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.mobile)
  return mobile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_mobile() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.mobile)
  if (!has_mobile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return mobile_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mobile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.mobile)
}

// optional bytes sign = 13;
inline bool record::has_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void record::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& record::sign() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.sign)
  return sign_.GetNoArena();
}
inline void record::set_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.sign)
}
inline void record::set_sign(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.sign)
}
inline void record::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.sign)
}
inline void record::set_sign(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.sign)
}
inline std::string* record::mutable_sign() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.sign)
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_sign() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.sign)
  if (!has_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return sign_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.sign)
}

// optional uint32 country = 14;
inline bool record::has_country() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void record::clear_country() {
  country_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::country() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.country)
  return country_;
}
inline void record::set_country(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  country_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.country)
}

// optional uint32 province = 15;
inline bool record::has_province() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void record::clear_province() {
  province_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::province() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.province)
  return province_;
}
inline void record::set_province(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  province_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.province)
}

// optional uint32 city = 16;
inline bool record::has_city() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void record::clear_city() {
  city_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::city() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.city)
  return city_;
}
inline void record::set_city(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  city_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.city)
}

// optional uint32 class_index = 17;
inline bool record::has_class_index() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void record::clear_class_index() {
  class_index_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record::class_index() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.class_index)
  return class_index_;
}
inline void record::set_class_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  class_index_ = value;
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.class_index)
}

// optional string class_name = 18;
inline bool record::has_class_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void record::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& record::class_name() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.class_name)
  return class_name_.GetNoArena();
}
inline void record::set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.class_name)
}
inline void record::set_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.class_name)
}
inline void record::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.class_name)
}
inline void record::set_class_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.class_name)
}
inline std::string* record::mutable_class_name() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_class_name() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.class_name)
  if (!has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return class_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.class_name)
}

// optional string country_name = 19;
inline bool record::has_country_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void record::clear_country_name() {
  country_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& record::country_name() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.country_name)
  return country_name_.GetNoArena();
}
inline void record::set_country_name(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  country_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.country_name)
}
inline void record::set_country_name(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  country_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.country_name)
}
inline void record::set_country_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  country_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.country_name)
}
inline void record::set_country_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  country_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.country_name)
}
inline std::string* record::mutable_country_name() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.country_name)
  return country_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_country_name() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.country_name)
  if (!has_country_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return country_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_country_name(std::string* country_name) {
  if (country_name != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  country_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_name);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.country_name)
}

// optional string province_name = 20;
inline bool record::has_province_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void record::clear_province_name() {
  province_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& record::province_name() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.province_name)
  return province_name_.GetNoArena();
}
inline void record::set_province_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  province_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.province_name)
}
inline void record::set_province_name(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  province_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.province_name)
}
inline void record::set_province_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  province_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.province_name)
}
inline void record::set_province_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  province_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.province_name)
}
inline std::string* record::mutable_province_name() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.province_name)
  return province_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_province_name() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.province_name)
  if (!has_province_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return province_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_province_name(std::string* province_name) {
  if (province_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  province_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), province_name);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.province_name)
}

// optional string city_name = 21;
inline bool record::has_city_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void record::clear_city_name() {
  city_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& record::city_name() const {
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.city_name)
  return city_name_.GetNoArena();
}
inline void record::set_city_name(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  city_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AccountSearchPb.record.city_name)
}
inline void record::set_city_name(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  city_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AccountSearchPb.record.city_name)
}
inline void record::set_city_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  city_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AccountSearchPb.record.city_name)
}
inline void record::set_city_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  city_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AccountSearchPb.record.city_name)
}
inline std::string* record::mutable_city_name() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.city_name)
  return city_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record::release_city_name() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.city_name)
  if (!has_city_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return city_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record::set_allocated_city_name(std::string* city_name) {
  if (city_name != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  city_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city_name);
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.city_name)
}

// optional .AccountSearchPb.Label msg_group_labels = 22;
inline bool record::has_msg_group_labels() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::AccountSearchPb::Label& record::msg_group_labels() const {
  const ::AccountSearchPb::Label* p = msg_group_labels_;
  // @@protoc_insertion_point(field_get:AccountSearchPb.record.msg_group_labels)
  return p != nullptr ? *p : *reinterpret_cast<const ::AccountSearchPb::Label*>(
      &::AccountSearchPb::_Label_default_instance_);
}
inline ::AccountSearchPb::Label* record::release_msg_group_labels() {
  // @@protoc_insertion_point(field_release:AccountSearchPb.record.msg_group_labels)
  _has_bits_[0] &= ~0x00000200u;
  ::AccountSearchPb::Label* temp = msg_group_labels_;
  msg_group_labels_ = nullptr;
  return temp;
}
inline ::AccountSearchPb::Label* record::mutable_msg_group_labels() {
  _has_bits_[0] |= 0x00000200u;
  if (msg_group_labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountSearchPb::Label>(GetArenaNoVirtual());
    msg_group_labels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AccountSearchPb.record.msg_group_labels)
  return msg_group_labels_;
}
inline void record::set_allocated_msg_group_labels(::AccountSearchPb::Label* msg_group_labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_group_labels_);
  }
  if (msg_group_labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_group_labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_group_labels, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  msg_group_labels_ = msg_group_labels;
  // @@protoc_insertion_point(field_set_allocated:AccountSearchPb.record.msg_group_labels)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AccountSearchPb::record_Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AccountSearchPb::record_Source>() {
  return ::AccountSearchPb::record_Source_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_record_2eproto
