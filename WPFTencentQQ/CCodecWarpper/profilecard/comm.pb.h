// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ui.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comm_2eproto;
namespace SummaryCardBusiEntry {
class comm;
class commDefaultTypeInternal;
extern commDefaultTypeInternal _comm_default_instance_;
}  // namespace SummaryCardBusiEntry
PROTOBUF_NAMESPACE_OPEN
template<> ::SummaryCardBusiEntry::comm* Arena::CreateMaybeMessage<::SummaryCardBusiEntry::comm>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SummaryCardBusiEntry {

// ===================================================================

class comm :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SummaryCardBusiEntry.comm) */ {
 public:
  comm();
  virtual ~comm();

  comm(const comm& from);
  comm(comm&& from) noexcept
    : comm() {
    *this = ::std::move(from);
  }

  inline comm& operator=(const comm& from) {
    CopyFrom(from);
    return *this;
  }
  inline comm& operator=(comm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const comm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const comm* internal_default_instance() {
    return reinterpret_cast<const comm*>(
               &_comm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(comm& a, comm& b) {
    a.Swap(&b);
  }
  inline void Swap(comm* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline comm* New() const final {
    return CreateMaybeMessage<comm>(nullptr);
  }

  comm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<comm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const comm& from);
  void MergeFrom(const comm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(comm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SummaryCardBusiEntry.comm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 7,
    kErrMsgFieldNumber = 11,
    kQqverFieldNumber = 13,
    kDisplayFieldNumber = 9,
    kVerFieldNumber = 1,
    kSeqFieldNumber = 2,
    kFromuinFieldNumber = 3,
    kTouinFieldNumber = 4,
    kServiceFieldNumber = 5,
    kSessionTypeFieldNumber = 6,
    kClientIpFieldNumber = 8,
    kResultFieldNumber = 10,
    kPlatformFieldNumber = 12,
    kBuildFieldNumber = 14,
  };
  // optional bytes session_key = 7;
  bool has_session_key() const;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const void* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // optional string err_msg = 11;
  bool has_err_msg() const;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);

  // optional string qqver = 13;
  bool has_qqver() const;
  void clear_qqver();
  const std::string& qqver() const;
  void set_qqver(const std::string& value);
  void set_qqver(std::string&& value);
  void set_qqver(const char* value);
  void set_qqver(const char* value, size_t size);
  std::string* mutable_qqver();
  std::string* release_qqver();
  void set_allocated_qqver(std::string* qqver);

  // optional .SummaryCardBusiEntry.ui display = 9;
  bool has_display() const;
  void clear_display();
  const ::SummaryCardBusiEntry::ui& display() const;
  ::SummaryCardBusiEntry::ui* release_display();
  ::SummaryCardBusiEntry::ui* mutable_display();
  void set_allocated_display(::SummaryCardBusiEntry::ui* display);

  // optional uint32 ver = 1;
  bool has_ver() const;
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 fromuin = 3;
  bool has_fromuin() const;
  void clear_fromuin();
  ::PROTOBUF_NAMESPACE_ID::uint64 fromuin() const;
  void set_fromuin(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 touin = 4;
  bool has_touin() const;
  void clear_touin();
  ::PROTOBUF_NAMESPACE_ID::uint64 touin() const;
  void set_touin(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 service = 5;
  bool has_service() const;
  void clear_service();
  ::PROTOBUF_NAMESPACE_ID::uint32 service() const;
  void set_service(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 session_type = 6;
  bool has_session_type() const;
  void clear_session_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_type() const;
  void set_session_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 client_ip = 8;
  bool has_client_ip() const;
  void clear_client_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_ip() const;
  void set_client_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 result = 10;
  bool has_result() const;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 platform = 12;
  bool has_platform() const;
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 build = 14;
  bool has_build() const;
  void clear_build();
  ::PROTOBUF_NAMESPACE_ID::int32 build() const;
  void set_build(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SummaryCardBusiEntry.comm)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qqver_;
  ::SummaryCardBusiEntry::ui* display_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fromuin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 touin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_;
  ::PROTOBUF_NAMESPACE_ID::int32 build_;
  friend struct ::TableStruct_comm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// comm

// optional uint32 ver = 1;
inline bool comm::has_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void comm::clear_ver() {
  ver_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::ver() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.ver)
  return ver_;
}
inline void comm::set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ver_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.ver)
}

// optional uint32 seq = 2;
inline bool comm::has_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void comm::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::seq() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.seq)
  return seq_;
}
inline void comm::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.seq)
}

// optional uint64 fromuin = 3;
inline bool comm::has_fromuin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void comm::clear_fromuin() {
  fromuin_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 comm::fromuin() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.fromuin)
  return fromuin_;
}
inline void comm::set_fromuin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  fromuin_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.fromuin)
}

// optional uint64 touin = 4;
inline bool comm::has_touin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void comm::clear_touin() {
  touin_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 comm::touin() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.touin)
  return touin_;
}
inline void comm::set_touin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  touin_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.touin)
}

// optional uint32 service = 5;
inline bool comm::has_service() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void comm::clear_service() {
  service_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::service() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.service)
  return service_;
}
inline void comm::set_service(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  service_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.service)
}

// optional uint32 session_type = 6;
inline bool comm::has_session_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void comm::clear_session_type() {
  session_type_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::session_type() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.session_type)
  return session_type_;
}
inline void comm::set_session_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  session_type_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.session_type)
}

// optional bytes session_key = 7;
inline bool comm::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void comm::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& comm::session_key() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.session_key)
  return session_key_.GetNoArena();
}
inline void comm::set_session_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.session_key)
}
inline void comm::set_session_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SummaryCardBusiEntry.comm.session_key)
}
inline void comm::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SummaryCardBusiEntry.comm.session_key)
}
inline void comm::set_session_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SummaryCardBusiEntry.comm.session_key)
}
inline std::string* comm::mutable_session_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:SummaryCardBusiEntry.comm.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* comm::release_session_key() {
  // @@protoc_insertion_point(field_release:SummaryCardBusiEntry.comm.session_key)
  if (!has_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void comm::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:SummaryCardBusiEntry.comm.session_key)
}

// optional uint32 client_ip = 8;
inline bool comm::has_client_ip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void comm::clear_client_ip() {
  client_ip_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::client_ip() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.client_ip)
  return client_ip_;
}
inline void comm::set_client_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.client_ip)
}

// optional .SummaryCardBusiEntry.ui display = 9;
inline bool comm::has_display() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::SummaryCardBusiEntry::ui& comm::display() const {
  const ::SummaryCardBusiEntry::ui* p = display_;
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.display)
  return p != nullptr ? *p : *reinterpret_cast<const ::SummaryCardBusiEntry::ui*>(
      &::SummaryCardBusiEntry::_ui_default_instance_);
}
inline ::SummaryCardBusiEntry::ui* comm::release_display() {
  // @@protoc_insertion_point(field_release:SummaryCardBusiEntry.comm.display)
  _has_bits_[0] &= ~0x00000008u;
  ::SummaryCardBusiEntry::ui* temp = display_;
  display_ = nullptr;
  return temp;
}
inline ::SummaryCardBusiEntry::ui* comm::mutable_display() {
  _has_bits_[0] |= 0x00000008u;
  if (display_ == nullptr) {
    auto* p = CreateMaybeMessage<::SummaryCardBusiEntry::ui>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SummaryCardBusiEntry.comm.display)
  return display_;
}
inline void comm::set_allocated_display(::SummaryCardBusiEntry::ui* display) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_);
  }
  if (display) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:SummaryCardBusiEntry.comm.display)
}

// optional uint32 result = 10;
inline bool comm::has_result() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void comm::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::result() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.result)
  return result_;
}
inline void comm::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  result_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.result)
}

// optional string err_msg = 11;
inline bool comm::has_err_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void comm::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& comm::err_msg() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.err_msg)
  return err_msg_.GetNoArena();
}
inline void comm::set_err_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.err_msg)
}
inline void comm::set_err_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  err_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SummaryCardBusiEntry.comm.err_msg)
}
inline void comm::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SummaryCardBusiEntry.comm.err_msg)
}
inline void comm::set_err_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SummaryCardBusiEntry.comm.err_msg)
}
inline std::string* comm::mutable_err_msg() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:SummaryCardBusiEntry.comm.err_msg)
  return err_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* comm::release_err_msg() {
  // @@protoc_insertion_point(field_release:SummaryCardBusiEntry.comm.err_msg)
  if (!has_err_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return err_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void comm::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  err_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:SummaryCardBusiEntry.comm.err_msg)
}

// optional uint32 platform = 12;
inline bool comm::has_platform() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void comm::clear_platform() {
  platform_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 comm::platform() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.platform)
  return platform_;
}
inline void comm::set_platform(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  platform_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.platform)
}

// optional string qqver = 13;
inline bool comm::has_qqver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void comm::clear_qqver() {
  qqver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& comm::qqver() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.qqver)
  return qqver_.GetNoArena();
}
inline void comm::set_qqver(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  qqver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.qqver)
}
inline void comm::set_qqver(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  qqver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SummaryCardBusiEntry.comm.qqver)
}
inline void comm::set_qqver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  qqver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SummaryCardBusiEntry.comm.qqver)
}
inline void comm::set_qqver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  qqver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SummaryCardBusiEntry.comm.qqver)
}
inline std::string* comm::mutable_qqver() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:SummaryCardBusiEntry.comm.qqver)
  return qqver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* comm::release_qqver() {
  // @@protoc_insertion_point(field_release:SummaryCardBusiEntry.comm.qqver)
  if (!has_qqver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return qqver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void comm::set_allocated_qqver(std::string* qqver) {
  if (qqver != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  qqver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qqver);
  // @@protoc_insertion_point(field_set_allocated:SummaryCardBusiEntry.comm.qqver)
}

// optional int32 build = 14;
inline bool comm::has_build() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void comm::clear_build() {
  build_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 comm::build() const {
  // @@protoc_insertion_point(field_get:SummaryCardBusiEntry.comm.build)
  return build_;
}
inline void comm::set_build(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  build_ = value;
  // @@protoc_insertion_point(field_set:SummaryCardBusiEntry.comm.build)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SummaryCardBusiEntry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
