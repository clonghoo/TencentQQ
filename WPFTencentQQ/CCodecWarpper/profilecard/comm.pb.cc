// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ui_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ui_ui_2eproto;
namespace SummaryCardBusiEntry {
class commDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<comm> _instance;
} _comm_default_instance_;
}  // namespace SummaryCardBusiEntry
static void InitDefaultsscc_info_comm_comm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SummaryCardBusiEntry::_comm_default_instance_;
    new (ptr) ::SummaryCardBusiEntry::comm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SummaryCardBusiEntry::comm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_comm_comm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_comm_comm_2eproto}, {
      &scc_info_ui_ui_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_comm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_comm_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_comm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_comm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, ver_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, seq_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, fromuin_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, touin_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, service_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, session_type_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, session_key_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, client_ip_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, display_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, result_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, err_msg_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, platform_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, qqver_),
  PROTOBUF_FIELD_OFFSET(::SummaryCardBusiEntry::comm, build_),
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  10,
  3,
  11,
  1,
  12,
  2,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::SummaryCardBusiEntry::comm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SummaryCardBusiEntry::_comm_default_instance_),
};

const char descriptor_table_protodef_comm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncomm.proto\022\024SummaryCardBusiEntry\032\010ui.p"
  "roto\"\213\002\n\004comm\022\013\n\003ver\030\001 \001(\r\022\013\n\003seq\030\002 \001(\r\022"
  "\017\n\007fromuin\030\003 \001(\004\022\r\n\005touin\030\004 \001(\004\022\017\n\007servi"
  "ce\030\005 \001(\r\022\024\n\014session_type\030\006 \001(\r\022\023\n\013sessio"
  "n_key\030\007 \001(\014\022\021\n\tclient_ip\030\010 \001(\r\022)\n\007displa"
  "y\030\t \001(\0132\030.SummaryCardBusiEntry.ui\022\016\n\006res"
  "ult\030\n \001(\r\022\017\n\007err_msg\030\013 \001(\t\022\020\n\010platform\030\014"
  " \001(\r\022\r\n\005qqver\030\r \001(\t\022\r\n\005build\030\016 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_comm_2eproto_deps[1] = {
  &::descriptor_table_ui_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_comm_2eproto_sccs[1] = {
  &scc_info_comm_comm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_comm_2eproto_once;
static bool descriptor_table_comm_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comm_2eproto = {
  &descriptor_table_comm_2eproto_initialized, descriptor_table_protodef_comm_2eproto, "comm.proto", 314,
  &descriptor_table_comm_2eproto_once, descriptor_table_comm_2eproto_sccs, descriptor_table_comm_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_comm_2eproto::offsets,
  file_level_metadata_comm_2eproto, 1, file_level_enum_descriptors_comm_2eproto, file_level_service_descriptors_comm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_comm_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_comm_2eproto), true);
namespace SummaryCardBusiEntry {

// ===================================================================

void comm::InitAsDefaultInstance() {
  ::SummaryCardBusiEntry::_comm_default_instance_._instance.get_mutable()->display_ = const_cast< ::SummaryCardBusiEntry::ui*>(
      ::SummaryCardBusiEntry::ui::internal_default_instance());
}
class comm::_Internal {
 public:
  using HasBits = decltype(std::declval<comm>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fromuin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_touin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_session_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_session_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::SummaryCardBusiEntry::ui& display(const comm* msg);
  static void set_has_display(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_err_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_qqver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::SummaryCardBusiEntry::ui&
comm::_Internal::display(const comm* msg) {
  return *msg->display_;
}
void comm::clear_display() {
  if (display_ != nullptr) display_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
comm::comm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SummaryCardBusiEntry.comm)
}
comm::comm(const comm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_key()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_err_msg()) {
    err_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  qqver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_qqver()) {
    qqver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qqver_);
  }
  if (from.has_display()) {
    display_ = new ::SummaryCardBusiEntry::ui(*from.display_);
  } else {
    display_ = nullptr;
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(build_));
  // @@protoc_insertion_point(copy_constructor:SummaryCardBusiEntry.comm)
}

void comm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_comm_comm_2eproto.base);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qqver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&display_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_) -
      reinterpret_cast<char*>(&display_)) + sizeof(build_));
}

comm::~comm() {
  // @@protoc_insertion_point(destructor:SummaryCardBusiEntry.comm)
  SharedDtor();
}

void comm::SharedDtor() {
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qqver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete display_;
}

void comm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const comm& comm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_comm_comm_2eproto.base);
  return *internal_default_instance();
}


void comm::Clear() {
// @@protoc_insertion_point(message_clear_start:SummaryCardBusiEntry.comm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      session_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      err_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      qqver_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(display_ != nullptr);
      display_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touin_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(touin_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&service_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_) -
        reinterpret_cast<char*>(&service_)) + sizeof(build_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* comm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fromuin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fromuin(&has_bits);
          fromuin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 touin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_touin(&has_bits);
          touin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_service(&has_bits);
          service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 session_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_session_type(&has_bits);
          session_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes session_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_client_ip(&has_bits);
          client_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SummaryCardBusiEntry.ui display = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_display(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string err_msg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_err_msg(), ptr, ctx, "SummaryCardBusiEntry.comm.err_msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_platform(&has_bits);
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string qqver = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_qqver(), ptr, ctx, "SummaryCardBusiEntry.comm.qqver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 build = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_build(&has_bits);
          build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool comm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SummaryCardBusiEntry.comm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ver(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_seq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fromuin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_fromuin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromuin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 touin = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_touin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &touin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_service(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 session_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_session_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes session_key = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_client_ip(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SummaryCardBusiEntry.ui display = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_result(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string err_msg = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->err_msg().data(), static_cast<int>(this->err_msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SummaryCardBusiEntry.comm.err_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platform = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_platform(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string qqver = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_qqver()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qqver().data(), static_cast<int>(this->qqver().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SummaryCardBusiEntry.comm.qqver");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_build(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SummaryCardBusiEntry.comm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SummaryCardBusiEntry.comm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void comm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SummaryCardBusiEntry.comm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 seq = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional uint64 fromuin = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->fromuin(), output);
  }

  // optional uint64 touin = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->touin(), output);
  }

  // optional uint32 service = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->service(), output);
  }

  // optional uint32 session_type = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->session_type(), output);
  }

  // optional bytes session_key = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->session_key(), output);
  }

  // optional uint32 client_ip = 8;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->client_ip(), output);
  }

  // optional .SummaryCardBusiEntry.ui display = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::display(this), output);
  }

  // optional uint32 result = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->result(), output);
  }

  // optional string err_msg = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err_msg().data(), static_cast<int>(this->err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SummaryCardBusiEntry.comm.err_msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->err_msg(), output);
  }

  // optional uint32 platform = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->platform(), output);
  }

  // optional string qqver = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqver().data(), static_cast<int>(this->qqver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SummaryCardBusiEntry.comm.qqver");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->qqver(), output);
  }

  // optional int32 build = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->build(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SummaryCardBusiEntry.comm)
}

::PROTOBUF_NAMESPACE_ID::uint8* comm::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SummaryCardBusiEntry.comm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 seq = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional uint64 fromuin = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->fromuin(), target);
  }

  // optional uint64 touin = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->touin(), target);
  }

  // optional uint32 service = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->service(), target);
  }

  // optional uint32 session_type = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->session_type(), target);
  }

  // optional bytes session_key = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->session_key(), target);
  }

  // optional uint32 client_ip = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_ip(), target);
  }

  // optional .SummaryCardBusiEntry.ui display = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::display(this), target);
  }

  // optional uint32 result = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->result(), target);
  }

  // optional string err_msg = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err_msg().data(), static_cast<int>(this->err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SummaryCardBusiEntry.comm.err_msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->err_msg(), target);
  }

  // optional uint32 platform = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->platform(), target);
  }

  // optional string qqver = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqver().data(), static_cast<int>(this->qqver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SummaryCardBusiEntry.comm.qqver");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->qqver(), target);
  }

  // optional int32 build = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->build(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SummaryCardBusiEntry.comm)
  return target;
}

size_t comm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SummaryCardBusiEntry.comm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes session_key = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // optional string err_msg = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

    // optional string qqver = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->qqver());
    }

    // optional .SummaryCardBusiEntry.ui display = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_);
    }

    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 seq = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional uint64 fromuin = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->fromuin());
    }

    // optional uint64 touin = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->touin());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 service = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->service());
    }

    // optional uint32 session_type = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->session_type());
    }

    // optional uint32 client_ip = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 result = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 platform = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional int32 build = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->build());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void comm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SummaryCardBusiEntry.comm)
  GOOGLE_DCHECK_NE(&from, this);
  const comm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<comm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SummaryCardBusiEntry.comm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SummaryCardBusiEntry.comm)
    MergeFrom(*source);
  }
}

void comm::MergeFrom(const comm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SummaryCardBusiEntry.comm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      err_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      qqver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qqver_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_display()->::SummaryCardBusiEntry::ui::MergeFrom(from.display());
    }
    if (cached_has_bits & 0x00000010u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      fromuin_ = from.fromuin_;
    }
    if (cached_has_bits & 0x00000080u) {
      touin_ = from.touin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      service_ = from.service_;
    }
    if (cached_has_bits & 0x00000200u) {
      session_type_ = from.session_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000800u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00001000u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00002000u) {
      build_ = from.build_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void comm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SummaryCardBusiEntry.comm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm::CopyFrom(const comm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SummaryCardBusiEntry.comm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm::IsInitialized() const {
  return true;
}

void comm::InternalSwap(comm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  err_msg_.Swap(&other->err_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qqver_.Swap(&other->qqver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(display_, other->display_);
  swap(ver_, other->ver_);
  swap(seq_, other->seq_);
  swap(fromuin_, other->fromuin_);
  swap(touin_, other->touin_);
  swap(service_, other->service_);
  swap(session_type_, other->session_type_);
  swap(client_ip_, other->client_ip_);
  swap(result_, other->result_);
  swap(platform_, other->platform_);
  swap(build_, other->build_);
}

::PROTOBUF_NAMESPACE_ID::Metadata comm::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SummaryCardBusiEntry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SummaryCardBusiEntry::comm* Arena::CreateMaybeMessage< ::SummaryCardBusiEntry::comm >(Arena* arena) {
  return Arena::CreateInternal< ::SummaryCardBusiEntry::comm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
